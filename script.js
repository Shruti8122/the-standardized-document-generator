// /* PS A - Vanilla JS Document Formatter & Exporter
//    Requires: marked, html2canvas, jspdf (umd), docx (umd), FileSaver
// */

(() => {
  // DOM references
  const textInput = document.getElementById("text-input");
  const fileInput = document.getElementById("file-input");
  const fileNameInput = document.getElementById("file-name");
  const templateSelect = document.getElementById("template-select");
  const previewFrame = document.getElementById("document-frame");
  const docHeader = document.getElementById("doc-header");
  const docContent = document.getElementById("doc-content");
  const docFooter = document.getElementById("doc-footer");
  const customCSSBox = document.getElementById("custom-css");
  const downloadDocxBtn = document.getElementById("download-docx");
  const downloadPdfBtn = document.getElementById("download-pdf");
  const togglePreviewBtn = document.getElementById("toggle-preview");
  const saveLocalBtn = document.getElementById("save-local");
  const loadLocalBtn = document.getElementById("load-local");
  const resetSampleBtn = document.getElementById("reset-sample");
  const addPageBtn = document.getElementById("add-page");
  const removePageBtn = document.getElementById("remove-page");
  const pageCountSpan = document.getElementById("page-count");
  const shareBtn = document.getElementById("share-link");

  // Templates
  const templates = {
    resume: {
      name: "Resume",
      fontFamily: "'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, Arial",
      header: (filename) => `<div class="doc-title">${filename || "Your Name"}</div><div style="font-weight:500;opacity:.8">Resume</div>`,
      footer: () => `<div>Generated by PS A — Document Formatter</div>`,
      css: `.doc-title{font-size:20px}.doc-heading{font-size:14px}.doc-body{font-size:13px}`
    },
    letter: {
      name: "Business Letter",
      fontFamily: "Georgia, 'Times New Roman', serif",
      header: () => `<div style="text-align:right">Company Name<br/>Address Line<br/>Date: ${new Date().toLocaleDateString()}</div>`,
      footer: () => `<div style="margin-top:8px">Sincerely,<br/>Company</div>`,
      css: `.doc-body{font-size:13px;line-height:1.6}`
    },
    report: {
      name: "Project Report",
      fontFamily: "'Roboto', Arial, sans-serif",
      header: () => `<div style="text-align:center;font-weight:700">Project Report</div>`,
      footer: () => `<div style="text-align:center">Page 1</div>`,
      css: `.doc-title{font-size:22px;text-align:center}.doc-body{font-size:13px}`
    },
    meeting: {
      name: "Meeting Minutes",
      fontFamily: "'Segoe UI', sans-serif",
      header: () => `<div style="text-align:center"><div class="doc-title">Meeting Minutes</div><div>${new Date().toLocaleDateString()}</div></div>`,
      footer: () => `<div style="text-align:right;font-size:12px">Generated by PS A</div>`,
      css: `.doc-title { font-size: 18px; font-weight: bold; }
            .doc-heading { font-weight: 600; margin-top: 12px; }
            .doc-body { font-size: 13px; line-height: 1.5; }`
    },
    summary: {
      name: "Executive Summary",
      fontFamily: "Georgia, serif",
      header: () => `<div class="doc-title">Executive Summary</div>`,
      footer: () => `<div style="font-style:italic">Prepared by [Your Company]</div>`,
      css: `.doc-title { font-size: 20px; text-align: center; font-weight: 700; color: #1f2937; }
            .doc-body { font-size: 14px; line-height: 1.8; color: #374151; }`
    },
    academic: {
      name: "Academic Paper",
      fontFamily: "'Times New Roman', serif",
      header: () => `<div style="text-align:center"><div class="doc-title">Academic Paper Title</div><div style="font-size:13px">Author Name — Institution</div></div>`,
      footer: () => `<div style="text-align:center; font-size:11px;">Page 1</div>`,
      css: `.doc-title { font-size: 22px; text-align: center; font-weight: bold; }
            .doc-body { font-size: 12px; line-height: 2; text-align: justify; }`
    },
    casestudy: {
      name: "Case Study",
      fontFamily: "'Roboto Slab', serif",
      header: () => `<div class="doc-title">Case Study</div>`,
      footer: () => `<div style="text-align:center;font-size:12px">Results Delivered</div>`,
      css: `.doc-title { font-size: 22px; font-weight: bold; text-align: center; }
            .doc-body { font-size: 13px; line-height: 1.6; }`
    },
    formal_bank: {
      name: "Bank Letter",
      fontFamily: "Times New Roman, serif",
      header: () => `<div style="font-size: 11px; margin-bottom: 30px;">
                      <div style="margin-bottom: 20px;">[Your Name/Address]</div>
                      <div style="font-weight: bold;">The Branch Manager</div>
                      <div>[Bank Name]</div>
                      <div>[Bank Branch Address]</div>
                      <div style="margin-top: 20px;">Date: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                    <div style="font-weight: bold; margin-bottom: 15px;">Subject: Application for [Your Purpose]</div>
                    <div>Dear Sir/Madam,</div>`,
      footer: () => `<div style="margin-top: 40px;">Sincerely,<br/>[Your Signature]<br/>[Your Printed Name]</div>`,
      css: `.doc-body { font-size: 12px; line-height: 1.8; text-indent: 0; }`
    },
    formal_school: {
      name: "School Letter",
      fontFamily: "Arial, sans-serif",
      header: () => `<div style="font-size: 12px; margin-bottom: 30px;">
                      <div style="margin-bottom: 20px;">[Your/Parent Name and Address]</div>
                      <div style="font-weight: bold;">The Principal</div>
                      <div>[School Name]</div>
                      <div>[School Address]</div>
                      <div style="margin-top: 20px;">Date: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                    <div style="font-weight: bold; margin-bottom: 15px;">Subject: Request for Leave of Absence - [Student Name]</div>
                    <div>Respected Madam/Sir,</div>`,
      footer: () => `<div style="margin-top: 40px;">Yours Obediently/Sincerely,<br/>[Your Name]</div>`,
      css: `.doc-body { font-size: 13px; line-height: 1.6; }`
    },
    formal_college: {
      name: "College Letter",
      fontFamily: "Cambria, Georgia, serif",
      header: () => `<div style="font-size: 12px; margin-bottom: 30px;">
                      <div style="margin-bottom: 20px;">[Your Student ID and Address]</div>
                      <div style="font-weight: bold;">The Head of Department</div>
                      <div>[Department Name]</div>
                      <div>[College/University Name]</div>
                      <div style="margin-top: 20px;">Date: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                    <div style="font-weight: bold; margin-bottom: 15px;">Subject: Inquiry regarding [Topic]</div>
                    <div>Dear Professor/Dr. [Last Name],</div>`,
      footer: () => `<div style="margin-top: 40px;">Yours Faithfully,<br/>[Your Printed Name]<br/>[Contact Number]</div>`,
      css: `.doc-body { font-size: 12px; line-height: 1.7; }`
    }
  };

  // Sample texts
  const sampleText = {
    resume: "# John Doe\n*Objective:* Seeking a challenging role...\n\n## Experience\n- Company A\n- Company B\n\n## Education\n- University X\n- University Y",
    letter: "# Business Letter\nDear Sir/Madam,\n\nWe are pleased to inform you about our services and offerings.\n\nSincerely,\nYour Company",
    report: "# Project Report\n## Introduction\nThis project aims to improve productivity...\n\n## Details\n- Task 1\n- Task 2\n\n## Conclusion\nThe project was successful.",
    meeting: "# Meeting Minutes\n## Attendees\n- Person 1\n- Person 2\n\n## Discussion Points\n- Point 1\n- Point 2\n\n## Actions\n- Action 1\n- Action 2",
    summary: "# Executive Summary\nThis report provides an overview of the company's performance...\n\n## Key Highlights\n- Highlight 1\n- Highlight 2",
    academic: "# Academic Paper Title\n**Author:** Jane Doe — University Name\n\n## Abstract\nThis paper discusses...\n\n## Sections\n- Section 1\n- Section 2\n\n## References\n- Reference 1\n- Reference 2",
    casestudy: "# Case Study\n## Project Overview\nDescription of the project...\n\n## Methodology\n- Step 1\n- Step 2\n\n## Results\n- Result 1\n- Result 2",
    formal_bank: "# Bank Letter\nDear Sir/Madam,\n\nI am writing to request [Your Purpose] at [Bank Name].\n\nThank you for your consideration.\n\nSincerely,\n[Your Name]",
    formal_school: "# School Letter\nRespected Madam/Sir,\n\nI request a leave of absence for [Student Name] from [Date] to [Date].\n\nYours Obediently,\n[Your Name]",
    formal_college: "# College Letter\nDear Professor/Dr. [Last Name],\n\nI am writing to inquire about [Topic].\n\nThank you for your time.\n\nYours Faithfully,\n[Your Printed Name]"
  };

  // Helpers
  const getTemplate = () => templates[templateSelect.value];

  function applyTemplateToPreview() {
    const tmpl = getTemplate();
    docHeader.innerHTML = tmpl.header(fileNameInput.value);
    docFooter.innerHTML = tmpl.footer();

    // Combine all textareas
    const allTextareas = document.querySelectorAll('#text-input, .extra-page');
    const combinedText = Array.from(allTextareas).map(t => t.value).join("\n\n");
    docContent.innerHTML = marked.parse(combinedText);

    const styleId = "__psa_template_style";
    let styleEl = document.getElementById(styleId);
    if (!styleEl) {
      styleEl = document.createElement("style");
      styleEl.id = styleId;
      document.head.appendChild(styleEl);
    }

    const combinedCSS = `
      #document-frame { font-family: ${tmpl.fontFamily}; color:#071133; }
      ${tmpl.css}
      ${customCSSBox.value || ""}
    `;
    styleEl.textContent = combinedCSS;
  }

  function updatePageCount() {
    const pages = document.querySelectorAll('#text-input, .extra-page');
    pageCountSpan.textContent = pages.length;
  }

  // Event handlers
  textInput.addEventListener("input", applyTemplateToPreview);
  templateSelect.addEventListener("change", applyTemplateToPreview);
  customCSSBox.addEventListener("input", applyTemplateToPreview);
  fileNameInput.addEventListener("input", applyTemplateToPreview);

  document.getElementById('btn-go-preview').addEventListener('click', () => {
    const preview = document.getElementById('preview-container');
    if (preview) preview.scrollIntoView({ behavior: 'smooth' });
  });

  document.getElementById('btn-go-top').addEventListener('click', () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });

  fileInput.addEventListener("change", async (ev) => {
    const f = ev.target.files[0];
    if (!f) return;
    const txt = await f.text();
    textInput.value = txt;
    fileNameInput.value = f.name.replace(/\.[^/.]+$/, "");
    applyTemplateToPreview();
  });

  togglePreviewBtn.addEventListener("click", () => {
    const cont = document.getElementById("preview-container");
    cont.style.display = cont.style.display === "none" ? "flex" : "none";
  });

  // PDF generation
  downloadPdfBtn.addEventListener("click", async () => {
    downloadPdfBtn.disabled = true;
    try {
      applyTemplateToPreview();
      const node = previewFrame;
      const canvas = await html2canvas(node, { scale: 2, useCORS: true });
      const imgData = canvas.toDataURL("image/png");
      const { jsPDF } = window.jspdf;
      const pdf = new jsPDF("p", "pt", "a4");
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgProps = pdf.getImageProperties(imgData);
      const imgWidth = pdfWidth;
      const imgHeight = (imgProps.height * imgWidth) / imgProps.width;
      let heightLeft = imgHeight;
      let position = 0;
      pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
      heightLeft -= pdfHeight;
      while (heightLeft > 0) {
        position -= pdfHeight;
        pdf.addPage();
        pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
        heightLeft -= pdfHeight;
      }
      pdf.save((fileNameInput.value || "document") + ".pdf");
      alert("✅ PDF downloaded successfully!");
    } catch (err) {
      console.error(err);
      alert("PDF generation failed: " + err.message);
    } finally {
      downloadPdfBtn.disabled = false;
    }
  });

//DOCX generation
downloadDocxBtn.addEventListener("click", async () => {
  downloadDocxBtn.disabled = true;
  try {
    const docxLib = window.docx;
    if (!docxLib) throw new Error("docx library not loaded");
    const { Document, Paragraph, Packer, HeadingLevel, TextRun } = docxLib;

    // Gather text from all pages
    const allTextareas = document.querySelectorAll('#text-input, .extra-page');
    const md = Array.from(allTextareas).map(t => t.value).join("\n\n");

    // Convert markdown to fresh Paragraphs
    const lines = md.split(/\r?\n/);
    const children = lines.map(line => {
      line = line.trim();
      if (!line) return new Paragraph({ text: "" });

      if (/^#\s+/.test(line)) {
        return new Paragraph({ text: line.replace(/^#\s+/, ""), heading: HeadingLevel.TITLE });
      }
      if (/^##\s+/.test(line)) {
        return new Paragraph({ text: line.replace(/^##\s+/, ""), heading: HeadingLevel.HEADING_1 });
      }
      if (/^[-*]\s+/.test(line)) {
        return new Paragraph({ text: line.replace(/^[-*]\s+/, "• "), bullet: { level: 0 } });
      }
      if (/\*\*|\*/.test(line)) {
        const parts = line.split(/(\*\*[^*]+\*\*|\*[^*]+\*)/g).filter(Boolean);
        const runs = parts.map(p => {
          if (/^\*\*.*\*\*$/.test(p)) return new TextRun({ text: p.replace(/^\*\*|\*\*$/g, ""), bold: true });
          if (/^\*.*\*$/.test(p)) return new TextRun({ text: p.replace(/^\*|\*$/g, ""), italics: true });
          return new TextRun({ text: p });
        });
        return new Paragraph({ children: runs });
      }
      return new Paragraph({ text: line });
    });

    // Create a fresh document each time
    const doc = new Document({
      sections: [{ properties: { page: { margin: { top: 720, bottom: 720, left: 720, right: 720 } } }, children }]
    });

    const blob = await Packer.toBlob(doc);
    saveAs(blob, (fileNameInput.value || "document") + ".docx");
    alert("✅ DOCX downloaded successfully!");
  } catch (err) {
    console.error(err);
    alert("⚠️ DOCX generation failed: " + err.message);
  } finally {
    downloadDocxBtn.disabled = false;
  }
});


  // Save / load localStorage
  saveLocalBtn.addEventListener("click", () => {
    const allTextareas = document.querySelectorAll('#text-input, .extra-page');
    const payload = {
      texts: Array.from(allTextareas).map(t => t.value),
      filename: fileNameInput.value,
      template: templateSelect.value,
      css: customCSSBox.value
    };
    localStorage.setItem("psa_saved_doc", JSON.stringify(payload));
    alert("Saved to localStorage");
  });

  loadLocalBtn.addEventListener("click", () => {
    const raw = localStorage.getItem("psa_saved_doc");
    if (!raw) { alert("No saved doc found"); return; }
    try {
      const p = JSON.parse(raw);
      // Clear extra pages
      document.querySelectorAll('.extra-page').forEach(e => e.remove());
      textInput.value = p.texts?.[0] || "";
      for (let i = 1; i < (p.texts?.length || 0); i++) {
        const newArea = document.createElement('textarea');
        newArea.rows = 12;
        newArea.className = 'extra-page';
        newArea.value = p.texts[i];
        textInput.insertAdjacentElement('afterend', newArea);
        newArea.addEventListener('input', applyTemplateToPreview);
      }
      fileNameInput.value = p.filename || "";
      templateSelect.value = p.template || "resume";
      customCSSBox.value = p.css || "";
      applyTemplateToPreview();
      updatePageCount();
      alert("Loaded saved doc");
    } catch (err) {
      alert("Failed to load: " + err.message);
    }
  });

  resetSampleBtn.addEventListener("click", () => {
    textInput.value = sampleText[templateSelect.value] || "";
    document.querySelectorAll('.extra-page').forEach(e => e.remove());
    applyTemplateToPreview();
    updatePageCount();
  });

  // Page control
  addPageBtn.addEventListener('click', () => {
    const newArea = document.createElement('textarea');
    newArea.rows = 12;
    newArea.className = 'extra-page';
    newArea.placeholder = '# New Page\n\nYour content...';
    newArea.style.width = textInput.offsetWidth + "px";
    textInput.insertAdjacentElement('afterend', newArea);
    newArea.addEventListener('input', applyTemplateToPreview);
    updatePageCount();
  });

  removePageBtn.addEventListener('click', () => {
    const extras = document.querySelectorAll('.extra-page');
    if (extras.length) extras[extras.length - 1].remove();
    applyTemplateToPreview();
    updatePageCount();
  });

  // Initial setup
  textInput.value = sampleText[templateSelect.value] || "";
  applyTemplateToPreview();
  updatePageCount();

  templateSelect.addEventListener("change", () => {
  // Reset main textarea to template sample text
  textInput.value = sampleText[templateSelect.value] || "";
  // Remove extra pages
  document.querySelectorAll('.extra-page').forEach(e => e.remove());
  // Apply template styling and preview
  applyTemplateToPreview();
  // Update page count
  updatePageCount();
});

// Dark Mode Toggle
const themeToggle = document.getElementById('theme-toggle');
const savedTheme = localStorage.getItem('theme');
if (savedTheme) {
  document.body.classList.toggle('dark-mode', savedTheme === 'dark');
  themeToggle.textContent = savedTheme === 'dark' ? '☀' : '🌙';
}
themeToggle.addEventListener('click', () => {
  const isDark = document.body.classList.toggle('dark-mode');
  localStorage.setItem('theme', isDark ? 'dark' : 'light');
  themeToggle.textContent = isDark ? '☀' : '🌙';
});

// Share link
const shareBox = document.createElement('div');
shareBox.id = 'share-box';
shareBox.style.display = 'none';
shareBox.style.marginTop = '8px';
shareBox.style.gap = '8px';
shareBox.style.alignItems = 'center';
shareBox.style.flexWrap = 'wrap';
shareBox.innerHTML = `
  <input type="text" readonly style="flex:1; padding:6px; border-radius:4px; border:1px solid #ccc;" />
  <button style="padding:6px 12px; border:none; border-radius:4px; background:#7c3aed; color:#fff; cursor:pointer;">Copy</button>
`;
shareBtn.insertAdjacentElement('afterend', shareBox);

const shareInput = shareBox.querySelector('input');
const copyBtn = shareBox.querySelector('button');

shareBtn.addEventListener('click', () => {
  const pages = document.querySelectorAll('#text-input, .extra-page');
  const tmpl = templateSelect.value;

  // Encode each page's value
  const pageContent = Array.from(pages)
    .map(p => encodeURIComponent(p.value))
    .join('|');

  // Include template and page data in URL
  const shareURL = `${window.location.origin}${window.location.pathname}?template=${tmpl}&pages=${pageContent}`;

  // Set input and show share box
  shareInput.value = shareURL;
  shareBox.style.display = 'flex';

  // Apply template to preview immediately
  applyTemplateToPreview();
});


// MODIFIED COPY BUTTON LOGIC FOR BETTER UI FEEDBACK
copyBtn.addEventListener('click', () => {
    shareInput.select();
    const originalText = copyBtn.textContent;

    navigator.clipboard.writeText(shareInput.value)
        .then(() => {
            // Success: Change button text briefly
            copyBtn.textContent = 'Copied! ✅';
            copyBtn.style.backgroundColor = '#10b981'; // Tailwind green-500
            setTimeout(() => {
                copyBtn.textContent = originalText;
                copyBtn.style.backgroundColor = '#7c3aed'; // Tailwind violet-600
            }, 1500);
        })
        .catch((err) => {
            // Fallback/Error
            console.error('Copy failed: ', err);
            alert('⚠️ Copy failed. Please copy manually: ' + shareInput.value);
        });
});

window.addEventListener("DOMContentLoaded", () => {
  const params = new URLSearchParams(window.location.search);
  const tmpl = params.get("template");
  const pages = params.get("pages");

  if (tmpl && pages) {
    try {
      templateSelect.value = tmpl;

      // Clear old extra pages
      document.querySelectorAll(".extra-page").forEach(e => e.remove());

      // Load all pages
      const decodedPages = pages.split("|").map(p => decodeURIComponent(p));
      textInput.value = decodedPages[0] || "";
      for (let i = 1; i < decodedPages.length; i++) {
        const newArea = document.createElement("textarea");
        newArea.rows = 12;
        newArea.className = "extra-page";
        newArea.value = decodedPages[i];
        textInput.insertAdjacentElement("afterend", newArea);
        newArea.addEventListener("input", applyTemplateToPreview);
      }

      // Apply template preview exactly like editor
      applyTemplateToPreview();
      updatePageCount();

      console.log("✅ Shared document loaded successfully.");
    } catch (err) {
      console.error("⚠️ Failed to load shared link:", err);
    }
  }
});


})();
